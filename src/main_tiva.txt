#include <Arduino.h>
#include <RoverArmMotor.h>
#include <tm4c123gh6pm.h>
#include <stdint.h>
#include <stdbool.h>
#include "driverlib/sysctl.h"
#include "driverlib/watchdog.h"
#include <Rover_Limits.h>
#include <Rover_SerialAPI.h>

#define HIGHEST_ANGLE_VOLTAGE 3850
#define ZERO_POINT 200

// #define CLAW_PWM PC_5
// #define CLAW_DIR PC_6

#define WR_PWM PB_6
#define WR_DIR PA_4
#define WR_ENCODER PB_5

#define WP_PWM PC_4
#define WP_DIR PB_3
#define WP_ENCODER PB_4

#define SHLDR_PWM PA_7
#define SHLDR_ENCODER PE_3
#define SHLDR_BRAKE PD_6

#define EBLW_PWM PF_3
#define EBLW_ENCODER PE_4
#define EBLW_BRAKE PD_7

#define WAIST_PWM PB_7
#define WAIST_ENCODER PB_1

#define LS_1 PB_2
#define LS_2 PB_0
#define LS_3 PA_3
#define LS_4 PA_2
#define LS_5 PF_0
#define LS_6 PF_4
#define LS_7 PB_0
#define LS_8 PB_0
#define LS_9 PB_5
#define LS_10 PA_5


#define FWD 1
#define REV -1

#define SERIAL_RX_BUFFER_SIZE 64
typedef struct{
  float b[SERIAL_RX_BUFFER_SIZE/sizeof(float)];
  size_t count; 
}FloatBuffer;

FloatBuffer fbuf; 
static char buffer[SERIAL_RX_BUFFER_SIZE];
static float fbuffer[SERIAL_RX_BUFFER_SIZE];
char temp_msg[25];

float positions[5];
char buf[25];
float * clawState;
float tempClaw;
bool accClawState = false;
//TODO: add array to contain limit switch states 
volatile float wr_position; 
volatile float wp_position; 
volatile float shldr_position; 
volatile float elbw_position; 
volatile float waist_position;

// PID variables and constants
double Setpoint, Input, Output;
double aggKp=0.025, aggKi=0.019,  aggKd=0, elbaggKp=0.025, elbaggKi=0.019,  elbaggKd=0;
double regKp=0.025, regKi=0.014, regKd=0, elbregKp=0.025, elbregKi=0.014,  elbregKd=0;
RoverArmMotor Wrist_Roll(WR_PWM, WR_ENCODER, CYTRON, 5.0, 141.0, WR_DIR, 0);
RoverArmMotor Wrist_Pitch(WP_PWM, WP_ENCODER, CYTRON, 175.0, 200.0, WP_DIR, 0);
RoverArmMotor Shoulder(SHLDR_PWM, SHLDR_ENCODER, BLUE_ROBOTICS, 5.0, 141.0, 0, SHLDR_BRAKE);
RoverArmMotor Elbow(EBLW_PWM, EBLW_ENCODER, BLUE_ROBOTICS, 5.0, 141.0, 0, EBLW_BRAKE);
RoverArmMotor Waist(WAIST_PWM, WAIST_ENCODER, BLUE_ROBOTICS, 5.0, 141.0, 0, 0);
//RoverArmMotor Claw(CLAW_PWM, 0, BLUE_ROBOTICS, 5.0, 141.0, CLAW_DIR, 0);
Rover_Limits Limits(LS_1, LS_2, LS_3, LS_4, LS_5, LS_6, LS_7, LS_8, LS_9, LS_10);

void ConnectionLostISR();

void setup() {
  // put your setup code here, to run once:

  SerialAPI::init('0', 9600); //TODO_PORT mn297, use CAN BUS
  
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
  Wrist_Pitch.begin(elbaggKp, elbaggKi, elbaggKd, elbregKp, elbregKi, elbregKd);
  Shoulder.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
  Elbow.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
  Waist.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
  //Claw.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
  Limits.init();

  // Wrist_Roll.setMultiplierBool(true, 1);
  // Wrist_Pitch.setMultiplierBool(false, 1);
  Wrist_Roll.setMultiplierBool(true, 48.0/18.0); //mn297 change gearRatio
  Wrist_Roll.setAngleLimits(5.0, 141.0);
  // Wrist_Pitch.setGearRatio(1);
  // Wrist_Pitch.setAngleLimits(0.0, 360.0);


  /*TODO: Changee the angle limits and verify the gear reduction*/
  //based on what ben said the gear reduction was 
  Waist.setMultiplierBool(true, 60.0/150.0);
  Waist.setAngleLimits(0, 180);


}

void loop() {

  if(SerialAPI::update()){
      //TODO_PORT CAN BUS msg parsing here mn297
  }
  SerialAPI::send_bytes('0', temp_msg, 25);
  Wrist_Roll.newSetpoint((double) wr_position);
  Wrist_Roll.tick();

  Wrist_Pitch.newSetpoint((double) wp_position);
  Wrist_Pitch.tick();

  Shoulder.newSetpoint((double) shldr_position);
  Shoulder.disengageBrake(); 
  Shoulder.tick();

  Elbow.newSetpoint((double) elbw_position);
  Elbow.disengageBrake();
  Elbow.tick();

  Waist.newSetpoint((double) waist_position);  
  Waist.tick();
}

